
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9d  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000908  00000000  00000000  00001361  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c3  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039f  00000000  00000000  000028e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002c85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 84 00 	call	0x108	; 0x108 <main>
  74:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Button_init>:
 */ 

#include "Button.h"

void Button_init(ST_BUTTON_config_t config)
{
  7c:	96 2f       	mov	r25, r22
	if(config.CONNECTION == INTERNAL_PULLUP){
  7e:	82 30       	cpi	r24, 0x02	; 2
  80:	31 f4       	brne	.+12     	; 0x8e <Button_init+0x12>
		DIO_setPinDir(config.PORT,config.PIN,PULLUP);
  82:	42 e0       	ldi	r20, 0x02	; 2
  84:	67 2f       	mov	r22, r23
  86:	89 2f       	mov	r24, r25
  88:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_setPinDir>
  8c:	08 95       	ret
	}
	else
		DIO_setPinDir(config.PORT,config.PIN,IN);
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	67 2f       	mov	r22, r23
  92:	89 2f       	mov	r24, r25
  94:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_setPinDir>
  98:	08 95       	ret

0000009a <Button_getState>:
}
EN_DATA_t Button_getState(ST_BUTTON_config_t config)
{
  9a:	96 2f       	mov	r25, r22
  9c:	67 2f       	mov	r22, r23
	static EN_DATA_t current_state=LOW;
	static EN_DATA_t last_stable=LOW;								//last stable state

	static uint8_t counter = 0;
	
	if (config.CONNECTION == PULLDOWN_RES){
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	31 f4       	brne	.+12     	; 0xae <Button_getState+0x14>
		current_state = DIO_getPin(config.PORT,config.PIN);
  a2:	89 2f       	mov	r24, r25
  a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_getPin>
  a8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_state.1654>
  ac:	08 c0       	rjmp	.+16     	; 0xbe <Button_getState+0x24>
	}
	else{
		current_state = !DIO_getPin(config.PORT,config.PIN);
  ae:	89 2f       	mov	r24, r25
  b0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_getPin>
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	81 11       	cpse	r24, r1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <current_state.1654>
	}

	if (current_state != last_button_state){					//check if debouncing is over
  be:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <current_state.1654>
  c2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <last_button_state.1653>
  c6:	89 17       	cp	r24, r25
  c8:	19 f0       	breq	.+6      	; 0xd0 <Button_getState+0x36>
		last_button_state = current_state;	
  ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <last_button_state.1653>
  ce:	05 c0       	rjmp	.+10     	; 0xda <Button_getState+0x40>
	}
	else{
		counter++;
  d0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <counter.1656>
  d4:	9f 5f       	subi	r25, 0xFF	; 255
  d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <counter.1656>
	}
		
	if (counter >20)												// if it is same input for 20 loop return current state
  da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <counter.1656>
  de:	95 31       	cpi	r25, 0x15	; 21
  e0:	28 f0       	brcs	.+10     	; 0xec <Button_getState+0x52>
	{
		counter = 0;
  e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter.1656>
		last_stable = current_state;
  e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		return current_state;
  ea:	08 95       	ret
	}
	else
	return last_stable;										// return last stable state if not stable yet
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	
  f0:	08 95       	ret

000000f2 <LED_init>:
void LED_OFF(ST_LED_CONFIG_t config)
{
	if (config.CONN == ACTIVE_HIGH)
		DIO_clearPin(config.PORT,config.PIN);
	else if (config.CONN == ACTIVE_LOW)
		DIO_setPin(config.PORT,config.PIN);
  f2:	86 2f       	mov	r24, r22
  f4:	67 2f       	mov	r22, r23
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_setPinDir>
  fc:	08 95       	ret

000000fe <LED_TOGGLE>:
}
void LED_TOGGLE(ST_LED_CONFIG_t config)
{
  fe:	86 2f       	mov	r24, r22
 100:	67 2f       	mov	r22, r23
	DIO_toggle(config.PORT,config.PIN);
 102:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_toggle>
 106:	08 95       	ret

00000108 <main>:
#include ".\ECUAL\BUTTON\Button.h"
#include ".\ECUAL\LED\Led.h"

int main ()
{
	ST_BUTTON_config_t buttonConfig = {PORTA,PIN4,INTERNAL_PULLUP};
 108:	1b e3       	ldi	r17, 0x3B	; 59
 10a:	d4 e0       	ldi	r29, 0x04	; 4
 10c:	c2 e0       	ldi	r28, 0x02	; 2
	ST_LED_CONFIG_t ledConfig = {PORTD,PIN0,ACTIVE_HIGH};
 10e:	0f 2e       	mov	r0, r31
 110:	f2 e3       	ldi	r31, 0x32	; 50
 112:	ef 2e       	mov	r14, r31
 114:	f0 2d       	mov	r31, r0
 116:	f1 2c       	mov	r15, r1
 118:	01 e0       	ldi	r16, 0x01	; 1
	Button_init(buttonConfig);
 11a:	6b e3       	ldi	r22, 0x3B	; 59
 11c:	74 e0       	ldi	r23, 0x04	; 4
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 3e 00 	call	0x7c	; 0x7c <Button_init>
	LED_init(ledConfig);
 124:	62 e3       	ldi	r22, 0x32	; 50
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 79 00 	call	0xf2	; 0xf2 <LED_init>
	
	while (1)
	{
		if (Button_getState(buttonConfig) == HIGH)		//If button is pressed
 12e:	61 2f       	mov	r22, r17
 130:	7d 2f       	mov	r23, r29
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 4d 00 	call	0x9a	; 0x9a <Button_getState>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	c9 f7       	brne	.-14     	; 0x12e <main+0x26>
			LED_TOGGLE(ledConfig);
 13c:	6e 2d       	mov	r22, r14
 13e:	7f 2d       	mov	r23, r15
 140:	80 2f       	mov	r24, r16
 142:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_TOGGLE>
 146:	f3 cf       	rjmp	.-26     	; 0x12e <main+0x26>

00000148 <DIO_setPinDir>:
*Function to clear Pin to LOW 
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
*/	
void DIO_clearPin(EN_PORTS_t port,EN_PINS_t pin)
{
	CLRBIT(REG(port),pin);
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	69 f4       	brne	.+26     	; 0x166 <DIO_setPinDir+0x1e>
 14c:	e8 2f       	mov	r30, r24
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	22 91       	ld	r18, -Z
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDir+0x14>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDir+0x10>
 160:	82 2b       	or	r24, r18
 162:	80 83       	st	Z, r24
 164:	08 95       	ret
 166:	41 11       	cpse	r20, r1
 168:	16 c0       	rjmp	.+44     	; 0x196 <DIO_setPinDir+0x4e>
 16a:	e8 2f       	mov	r30, r24
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	df 01       	movw	r26, r30
 170:	2e 91       	ld	r18, -X
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_setPinDir+0x34>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_setPinDir+0x30>
 180:	98 2f       	mov	r25, r24
 182:	90 95       	com	r25
 184:	92 23       	and	r25, r18
 186:	9c 93       	st	X, r25
 188:	90 b7       	in	r25, 0x30	; 48
 18a:	94 60       	ori	r25, 0x04	; 4
 18c:	90 bf       	out	0x30, r25	; 48
 18e:	90 81       	ld	r25, Z
 190:	89 2b       	or	r24, r25
 192:	80 83       	st	Z, r24
 194:	08 95       	ret
 196:	42 30       	cpi	r20, 0x02	; 2
 198:	a9 f4       	brne	.+42     	; 0x1c4 <DIO_setPinDir+0x7c>
 19a:	e8 2f       	mov	r30, r24
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	df 01       	movw	r26, r30
 1a0:	2e 91       	ld	r18, -X
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_setPinDir+0x64>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_setPinDir+0x60>
 1b0:	98 2f       	mov	r25, r24
 1b2:	90 95       	com	r25
 1b4:	92 23       	and	r25, r18
 1b6:	9c 93       	st	X, r25
 1b8:	90 b7       	in	r25, 0x30	; 48
 1ba:	9b 7f       	andi	r25, 0xFB	; 251
 1bc:	90 bf       	out	0x30, r25	; 48
 1be:	90 81       	ld	r25, Z
 1c0:	89 2b       	or	r24, r25
 1c2:	80 83       	st	Z, r24
 1c4:	08 95       	ret

000001c6 <DIO_getPin>:
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
* return uint8_t that holds the input value
*/	
uint8_t DIO_getPin(EN_PORTS_t port,EN_PINS_t pin)
{
	return GETBIT(REG(port-0x02),(uint8_t)pin);
 1c6:	e8 2f       	mov	r30, r24
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	32 97       	sbiw	r30, 0x02	; 2
 1cc:	80 81       	ld	r24, Z
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_getPin+0x10>
 1d2:	95 95       	asr	r25
 1d4:	87 95       	ror	r24
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_getPin+0xc>
}
 1da:	81 70       	andi	r24, 0x01	; 1
 1dc:	08 95       	ret

000001de <DIO_toggle>:
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
* return void
*/		
void DIO_toggle(EN_PORTS_t port,EN_PINS_t pin)
{
	TOGGLEBIT(REG(port),pin);
 1de:	e8 2f       	mov	r30, r24
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_toggle+0x10>
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_toggle+0xc>
 1f2:	28 27       	eor	r18, r24
 1f4:	20 83       	st	Z, r18
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
